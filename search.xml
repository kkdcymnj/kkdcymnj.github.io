<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2025 年数据结构与程序设计（信息类）期末考试</title>
    <url>/2025/10/18/final_test/</url>
    <content><![CDATA[<h3 id="选择题"><a href="#选择题" class="headerlink" title="选择题"></a><strong>选择题</strong></h3><ol>
<li><p>若长度为$n$的线性表采用顺序存储结构，在其第$i$个位置插入一个新元素的算法的时间复杂度为________。$(1\leq i\leq n+1)$</p>
<p>A. $O(\lg n)$</p>
<p>B. $O(1)$</p>
<p>C. $O(n)$</p>
<p>D. $O(n^2)$</p>
<span id="more"></span></li>
<li><p>若采用二叉链表的存储结构，在具有$n$个结点的二叉树中，空指针域的个数是________。</p>
<p>A. $2n+1$</p>
<p>B. $n+1$</p>
<p>C. $n-1$</p>
<p>D. 不确定</p>
</li>
<li><p>将数据元素 <code>1, 2, 3, 5, 7, 8, 10, 11, 23, 29, 31, 37, 41, 50</code>依次存放于一个一维数组 <code>[0..13]</code>中，采用折半查找法查找元素23，则被比较过的数组元素的下标依次为________。</p>
<p>A. 6, 12, 10, 8</p>
<p>B. 10, 31, 23</p>
<p>C. 7, 11, 9</p>
<p>D. 6, 10, 8</p>
</li>
<li><p>下列排序方法中，稳定的排序方法是________。</p>
<p>A. 选择排序</p>
<p>B. 谢尔排序</p>
<p>C. 快速排序</p>
<p>D. 插入排序</p>
</li>
<li><p>设有一组记录的关键字为 <code>18, 32, 22, 5, 66, 23, 82, 27, 58, 11, 10, 78</code>，利用散列存储，地址空间范围为 <code>[0..12]</code>，散列函数为$H(key)&#x3D;key\space\mathrm{mod}\space 13$，则散列地址为6的链中有________个结点。</p>
<p>A. 1</p>
<p>B. 2</p>
<p>C. 3</p>
<p>D. 4</p>
</li>
<li><p>若具有$n$个顶点的无向图采用邻接矩阵存储方法，该矩阵一定为一个________。</p>
<p>A. 稠密矩阵</p>
<p>B. 对称矩阵</p>
<p>C. 对角矩阵</p>
<p>D. 稀疏矩阵</p>
</li>
<li><p>一有向带权图如下图所示。若采用Dijkstra算法求源点A到其他各顶点的最短路径，得到的第一条最短路径的目标顶点是C，后续得到的其余各最短路径的目标顶点依次为C,  ________。</p>
<p>A. D, B, F, G, E</p>
<p>B. B, D, E, F, G</p>
<p>C. B, D, G, E, F</p>
<p>D. B, D, E, G, F</p>
</li>
</ol>
<img src="/images/7.png" width=80% height=50% align=center/>

<ol>
<li><p>对如下无向图进行遍历，下列选项中<strong>不可能</strong>是广度优先遍历的是________。</p>
<p>A. a, b, h, e, c, d, f, g</p>
<p>B. e, g, f, a, h, b, c, d</p>
<p>C. c, b, a, e, f, g, h, d</p>
<p>D. g, e, f, a, b, h, c, d</p>
</li>
</ol>
<img src="/images/8.png" width=80% height=50% align=center/>

<ol start="9">
<li><p>若符号 <code>PUSH</code>和 <code>POP</code>分别表示1次进栈与1次出栈操作，则进栈和出栈的操作序列可以表示为仅由 <code>PUSH</code>和 <code>POP</code>组成的序列。对于初态为空的栈，下面给出的操作序列中，________序列<strong>不能</strong>使栈的终态为空。</p>
<p>A. <code>PUSH, PUSH, PUSH, PUSH, POP, POP, POP, POP</code></p>
<p>B. <code>PUSH, POP, PUSH, PUSH, PUSH, POP,PUSH, POP</code></p>
<p>C. <code>PUSH, PUSH, PUSH, POP, PUSH, POP, POP, POP</code></p>
<p>D. <code>PUSH, PUSH, PUSH, POP, POP, PUSH, POP, POP</code></p>
</li>
<li><p>对非空二叉查找树进行________，将一定得到一个有序序列。</p>
<p>A. 前序遍历</p>
<p>B. 中序遍历</p>
<p>C. 后序遍历</p>
<p>D. 层次遍历</p>
</li>
<li><p>循环队列存储在数组 <code>A[0..n]</code>中，<code>front</code>是队头元素下标，则出队时 <code>front</code>操作为________。</p>
<p>A. <code>front=front+1</code></p>
<p>B. <code>front=(front+1)%(n-1)</code></p>
<p>C. <code>front=(front+1)%n</code></p>
<p>D. <code>front=(front+1)%(n+1)</code></p>
</li>
<li><p>若对序列 <code>2, 12, 16, 70, 5, 10</code>按值从小到大排序，前三趟排序结果分别为：</p>
<p>第1趟：<code>2, 12, 16, 70, 5, 10</code></p>
<p>第2趟：<code>2, 5, 16, 70, 12, 10</code></p>
<p>第3趟：<code>2, 5, 10, 70, 12, 16</code></p>
<p>由此可以断定，该排序过程采用的排序方法是________。</p>
<p>A. 快速排序</p>
<p>B. 选择排序</p>
<p>C. 插入排序</p>
<p>D. 冒泡排序</p>
</li>
</ol>
<h3 id="填空题"><a href="#填空题" class="headerlink" title="填空题"></a><strong>填空题</strong></h3><ol>
<li>一棵二叉查找树的后序遍历序列为 <code>23, 30, 38, 60, 58, 73, 70, 50</code>，则该二叉查找树的前序遍历序列为________。</li>
<li>若以 <code>{3, 4, 5, 6, 8}</code>作为叶子结点的权值构造哈夫曼树，其带权路径长度为________。</li>
<li>为解决程序执行过程中函数调用与返回的上下文管理问题，通常需要维护一个特殊的数据区，当调用子函数时，系统会将当前函数的返回地址、局部变量及参数等依次存入该数据区，而子函数执行完毕后则按相反顺序从数据区中读取内容恢复调用环境。该数据区的逻辑结构是________。</li>
<li>已知一棵3阶B-树如图所示，若在此B-树上插入关键字 <code>5</code>，则根节点序列为________。</li>
</ol>
<img src="/images/16.png" width=80% height=50% align=center/>

<ol start="5">
<li>已知无向带权图的结构如下图所示。其最小生成树中，各边权重之和为________。</li>
</ol>
<img src="/images/17.png" width=80% height=50% align=center/>

<ol start="6">
<li>一棵完全二叉树，根节点为第1层，第5层叶子结点个数为6，该二叉树最多有________个结点。</li>
<li>用 <code>S</code>表示入栈操作，<code>X</code>表示出栈操作，若元素入栈的顺序为 <code>12345</code>，为了得到 <code>13452</code>的出站顺序，相应的 <code>S</code>和 <code>X</code>的操作串为________。</li>
<li>元素 <code>A, B, C, D, E, F, G</code>依次执行入栈和出栈操作，若所有元素出栈后得到序列 <code>ADFECGB</code>，则栈的容量至少为________。</li>
</ol>
<h3 id="程序题"><a href="#程序题" class="headerlink" title="程序题"></a><strong>程序题</strong></h3><h4 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a><strong>第一题</strong></h4><p><strong>【问题描述】</strong></p>
<p>一餐馆需要开发一套电子收银系统，提供点菜和统计分析功能。请编程实现电子收银模拟系统：点菜时，需要输入桌台号（小于等于100的正整数表示）、菜品编码、数量（正整数表示）和单价（正整数表示，单位：元），菜品编码由一个大写的英文字母（A表示热菜或凉菜，B表示饮品，C表示主食）和三位0-9的数字组成。每天打烊时，老板希望得到当天的总销售额，并需要按照菜品的销售额由低到高排序输出菜品的销售信息，销售额相同的按照菜品的销售数量由小到大输出（不存在销售数量和销售额都相同的情况）。</p>
<p><strong>【输入形式】</strong></p>
<p>先从控制台输入当天点菜信息条数（大于0且小于100），然后分行输入点菜信息：桌台号、菜品编码、数量和单价之间以一个空格分隔。</p>
<p><strong>【输出形式】</strong></p>
<p>先按照销售额由低到高分行输出各菜品销售信息：菜品编码、该菜品总销售数量和该菜品总销售额之间以一个空格分隔，销售额相同的按照菜品的销售数量由小到大输出；最后输出总销售额。</p>
<p><strong>【样例输入】</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">30</span></span><br><span class="line"><span class="number">5</span> A003 <span class="number">1</span> <span class="number">38</span></span><br><span class="line"><span class="number">5</span> A005 <span class="number">1</span> <span class="number">26</span></span><br><span class="line"><span class="number">5</span> A012 <span class="number">1</span> <span class="number">69</span></span><br><span class="line"><span class="number">5</span> B002 <span class="number">2</span> <span class="number">10</span></span><br><span class="line"><span class="number">5</span> C001 <span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">3</span> A006 <span class="number">1</span> <span class="number">15</span></span><br><span class="line"><span class="number">3</span> A008 <span class="number">1</span> <span class="number">33</span></span><br><span class="line"><span class="number">3</span> C003 <span class="number">1</span> <span class="number">10</span></span><br><span class="line"><span class="number">6</span> A012 <span class="number">1</span> <span class="number">69</span></span><br><span class="line"><span class="number">6</span> A008 <span class="number">1</span> <span class="number">33</span></span><br><span class="line"><span class="number">6</span> A037 <span class="number">1</span> <span class="number">55</span></span><br><span class="line"><span class="number">6</span> A020 <span class="number">1</span> <span class="number">56</span></span><br><span class="line"><span class="number">6</span> A002 <span class="number">1</span> <span class="number">99</span></span><br><span class="line"><span class="number">6</span> A051 <span class="number">1</span> <span class="number">165</span></span><br><span class="line"><span class="number">6</span> B005 <span class="number">12</span> <span class="number">6</span></span><br><span class="line"><span class="number">6</span> C001 <span class="number">6</span> <span class="number">1</span></span><br><span class="line"><span class="number">6</span> C010 <span class="number">1</span> <span class="number">36</span></span><br><span class="line"><span class="number">2</span> A008 <span class="number">1</span> <span class="number">33</span></span><br><span class="line"><span class="number">2</span> A037 <span class="number">1</span> <span class="number">55</span></span><br><span class="line"><span class="number">2</span> C001 <span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">8</span> A008 <span class="number">1</span> <span class="number">33</span></span><br><span class="line"><span class="number">8</span> A012 <span class="number">1</span> <span class="number">69</span></span><br><span class="line"><span class="number">8</span> A006 <span class="number">1</span> <span class="number">15</span></span><br><span class="line"><span class="number">8</span> B005 <span class="number">2</span> <span class="number">6</span></span><br><span class="line"><span class="number">8</span> C001 <span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> A008 <span class="number">1</span> <span class="number">33</span></span><br><span class="line"><span class="number">1</span> A037 <span class="number">1</span> <span class="number">55</span></span><br><span class="line"><span class="number">1</span> A003 <span class="number">1</span> <span class="number">38</span></span><br><span class="line"><span class="number">1</span> B002 <span class="number">3</span> <span class="number">10</span></span><br><span class="line"><span class="number">1</span> C001 <span class="number">3</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p><strong>【样例输出】</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">C003 <span class="number">1</span> <span class="number">10</span></span><br><span class="line">C001 <span class="number">15</span> <span class="number">15</span></span><br><span class="line">A005 <span class="number">1</span> <span class="number">26</span></span><br><span class="line">A006 <span class="number">2</span> <span class="number">30</span></span><br><span class="line">C010 <span class="number">1</span> <span class="number">36</span></span><br><span class="line">B002 <span class="number">5</span> <span class="number">50</span></span><br><span class="line">A020 <span class="number">1</span> <span class="number">56</span></span><br><span class="line">A003 <span class="number">2</span> <span class="number">76</span></span><br><span class="line">B005 <span class="number">14</span> <span class="number">84</span></span><br><span class="line">A002 <span class="number">1</span> <span class="number">99</span></span><br><span class="line">A051 <span class="number">1</span> <span class="number">165</span></span><br><span class="line">A037 <span class="number">3</span> <span class="number">165</span></span><br><span class="line">A008 <span class="number">5</span> <span class="number">165</span></span><br><span class="line">A012 <span class="number">3</span> <span class="number">207</span></span><br><span class="line"><span class="number">1184</span></span><br></pre></td></tr></table></figure>

<p><strong>【样例说明】</strong></p>
<p>输入了30条点菜信息，汇总统计总销售额为1184元；编码为C003的菜品销售额最低，共10元；编码为A012的菜品销售额最高，销售了3份，共207元；编码为A051、A037和A008的菜品销售额相同，都为165元，这时需要按照销售数量由小到大的顺序输出。</p>
<p><strong>【评分标准】</strong></p>
<p>该题要求实现电子收银模拟系统，提交程序名为 <code>ecr.c</code>。</p>
<ol>
<li>只完成总销售额和菜品销售额统计功能，可得20%分数。</li>
<li>完成统计功能，并实现按照销售额排序可得60%的分数。</li>
<li>完成统计功能，并实现销售额和销售数量排序（如上面样例），可得100%分数。</li>
</ol>
<h4 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a><strong>第二题</strong></h4><p><strong>【问题描述】</strong></p>
<p>一家新闻社正在跟踪最近的一系列新闻，每条新闻都可以用一个事件表示，其中包含以下信息：事件类型（三种类型，以一个大写字母表示：A表示“突发新闻”、B表示“深度报道”、C表示“评论”）、事件发生时间（以8位数字表示，例如：20240305）和事件标题（不超过100字符的字符串表示，不包含空白符）。所有事件的个数不超过100。</p>
<p>新闻社希望按以下顺序处理这些事件：</p>
<ol>
<li>突发新闻事件（A）应立即处理（优先级最高）。</li>
<li>深度报道事件（B）应排在突发事件之后处理。</li>
<li>评论事件（C）应在所有其他事件处理完成后处理。</li>
<li>相同等级事件按时间倒序整理（即：时间近的先处理），若时间相同，则按照输入的倒序处理（即：先输入的后处理）。</li>
</ol>
<p>主编可以发出两种指令：</p>
<ol>
<li>锁定指令：用大写字母 <code>R</code>表示，后跟需要锁定的新闻事件数量$N$（大于0且小于等于输入的未被锁定的新闻事件数量）；遇到该指令时，需按照上面的处理顺序锁定已经输入的、且未被锁定的$N$个新闻事件。该指令可能没有，也可能有多个。</li>
<li>汇总命令：用大写字母 <code>E</code>表示；遇到该指令时，表示按照上面处理的顺序汇总剩余所有未被锁定的新闻事件，并且代表输入结束。</li>
</ol>
<p>算法提示：</p>
<ol>
<li>可利用三个栈分别存储处理三类新闻事件。</li>
<li>读入事件信息或锁定命令后要注意处理行末的换行符！</li>
</ol>
<p><strong>【输入形式】</strong></p>
<p>按照时间正序从控制台分行输入新闻事件信息，事件类型、事件标题和事件发生时间之间以一个空格分隔；中间可输入多条锁定指令（<code>R</code>与$N$之间以一个空格分隔）；最后输入汇总命令（<code>E</code>）表示输入结束。</p>
<p><strong>【输出形式】</strong></p>
<p>先按照锁定指令输入的先后顺序，分行输出锁定的新闻事件信息（事件类型、事件标题和事件发生时间之间以一个空格分隔）；最后输出遇到汇总命令时，汇总的所有未被锁定的新闻事件信息。</p>
<p><strong>【样例输入】</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">C <span class="number">20240317</span> Analysis_of_recent_traffic_congestion_situation</span><br><span class="line">A <span class="number">20240317</span> Stock_market_crash</span><br><span class="line">B <span class="number">20240317</span> The_Future_of_Artificial_Intelligence</span><br><span class="line">B <span class="number">20240318</span> The_impact_of_climate_change_on_global_food_supply</span><br><span class="line">A <span class="number">20240319</span> Sudden_earthquake_in_the_Pacific_Plate</span><br><span class="line">R <span class="number">3</span></span><br><span class="line">C <span class="number">20240319</span> Analyze_the_causes_of_extreme_weather_conditions</span><br><span class="line">R <span class="number">1</span></span><br><span class="line">A <span class="number">20240319</span> New_York_City_Suddenly_Falls_lizzard</span><br><span class="line">B <span class="number">20240320</span> Chip_Industry_Chain_Tracking</span><br><span class="line">E</span><br></pre></td></tr></table></figure>

<p><strong>【样例输出】</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">A <span class="number">20240319</span> Sudden_earthquake_in_the_Pacific_Plate</span><br><span class="line">A <span class="number">20240317</span> Stock_market_crash</span><br><span class="line">B <span class="number">20240318</span> The_impact_of_climate_change_on_global_food_supply</span><br><span class="line">B <span class="number">20240317</span> The_Future_of_Artificial_Intelligence</span><br><span class="line">A <span class="number">20240319</span> New_York_City_Suddenly_Falls_lizzard</span><br><span class="line">B <span class="number">20240320</span> Chip_Industry_Chain_Tracking</span><br><span class="line">C <span class="number">20240319</span> Analyze_the_causes_of_extreme_weather_conditions</span><br><span class="line">C <span class="number">20240317</span> Analysis_of_recent_traffic_congestion_situation</span><br></pre></td></tr></table></figure>

<p><strong>【样例说明】</strong></p>
<p>先输入了5条新闻事件，然后遇到锁定3条新闻事件的指令，于是按照规定的处理顺序，锁定了两条突发事件和一条20240318日期的深度报道事件；之后输入1条新闻事件后又遇到锁定1条新闻事件的指令，这次锁定的是20240317日期的深度报道事件；最后输入2条新闻事件后遇到汇总指令，输入结束。输出时：先输出之前锁定的事件，然后按照规定的处理顺序汇总输出所有未被锁定的新闻事件。</p>
<p>注意：由于浏览器显示的差异，从题目中拷贝出的输入样例信息每行后会多出空行，所以测试时请先将输入样例信息拷贝到文本编辑器（例如：记事本）中，删除掉其中的空行后再拷贝到控制台窗口中进行测试！</p>
<p><strong>【评分标准】</strong></p>
<p>该题要求实现新闻的事件的锁定汇总功能，提交程序名为 <code>report.c</code>。</p>
<p>仅实现汇总指令可得30%分数。</p>
<h4 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a><strong>第三题</strong></h4><p><strong>【问题描述】</strong></p>
<p>目前手机地图均提供根据当前位置查找兴趣点（如餐馆、电影院、品牌专买店、酒店、药店、加油站…）并根据距离远近给出相应路线，如在手机地图（高德、百度…）上查找加油站，将会按距离远近给出加油站及相应线路。编程实现兴趣点查找。</p>
<p><strong>【输入形式】</strong></p>
<p>首先从标准输入读入图顶点的个数$N$（大于0且小于200），图顶点表示地图中的各个位置。</p>
<p>然后从下一行开始分行输入每个顶点的编号（大于等于10）及该顶点包含的兴趣点（用整数1～9来表示不同类型的兴趣点），每行以-1结束，如输入行：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">10</span> <span class="number">1</span> <span class="number">3</span> <span class="number">5</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure>

<p>表示编号为10的顶点包含有1、3、5三种兴趣点；</p>
<p>之后输入边的个数$M$（大于0），然后分行输入$M$个以$(u, v, d)$表示的边的信息，其中$u$，$v$为边的2个顶点编号，$d$表示边的长度（以正整数表示），$u$，$v$和$d$之间以一个空格分隔。</p>
<p>最后一行输入要查找的兴趣点编号及当前位置（即：顶点编号），之间以一个空格分隔。</p>
<p><strong>【输出形式】</strong></p>
<p>按照距离由近至远的顺序分行输出找到的包含给定兴趣点的顶点编号、距离及路径（顶点编号、距离及路径之间以一个空格分隔），路径用从当前位置的顶点编号开始，到目标顶点编号所经过的所有顶点编号来表示，路径中的各顶点编号之间以英文减号字符‘-’分隔。</p>
<p>注意：</p>
<ol>
<li>假设没有2个距离完全相同的兴趣点！</li>
<li>如果当前位置就有要查找的兴趣点，则其距离为0（最近），只需输出当前位置顶点编号和距离0，不用输出路径。</li>
</ol>
<p><strong>【样例输入】</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">22</span> <span class="number">2</span> <span class="number">5</span> <span class="number">6</span> <span class="number">-1</span></span><br><span class="line"><span class="number">15</span> <span class="number">1</span> <span class="number">3</span> <span class="number">4</span> <span class="number">9</span> <span class="number">-1</span></span><br><span class="line"><span class="number">56</span> <span class="number">4</span> <span class="number">7</span> <span class="number">8</span> <span class="number">-1</span></span><br><span class="line"><span class="number">25</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">-1</span></span><br><span class="line"><span class="number">30</span> <span class="number">6</span> <span class="number">7</span> <span class="number">-1</span></span><br><span class="line"><span class="number">18</span> <span class="number">2</span> <span class="number">4</span> <span class="number">5</span> <span class="number">-1</span></span><br><span class="line"><span class="number">90</span> <span class="number">1</span> <span class="number">2</span> <span class="number">9</span> <span class="number">-1</span></span><br><span class="line"><span class="number">67</span> <span class="number">1</span> <span class="number">7</span> <span class="number">8</span> <span class="number">-1</span></span><br><span class="line"><span class="number">39</span> <span class="number">1</span> <span class="number">3</span> <span class="number">5</span> <span class="number">9</span> <span class="number">-1</span></span><br><span class="line"><span class="number">89</span> <span class="number">1</span> <span class="number">4</span> <span class="number">-1</span></span><br><span class="line"><span class="number">20</span> <span class="number">2</span> <span class="number">3</span> <span class="number">5</span> <span class="number">6</span> <span class="number">-1</span></span><br><span class="line"><span class="number">102</span> <span class="number">2</span> <span class="number">8</span> <span class="number">9</span> <span class="number">-1</span></span><br><span class="line"><span class="number">14</span></span><br><span class="line"><span class="number">56</span> <span class="number">22</span> <span class="number">10</span></span><br><span class="line"><span class="number">22</span> <span class="number">15</span> <span class="number">14</span></span><br><span class="line"><span class="number">56</span> <span class="number">25</span> <span class="number">6</span></span><br><span class="line"><span class="number">15</span> <span class="number">30</span> <span class="number">16</span></span><br><span class="line"><span class="number">30</span> <span class="number">90</span> <span class="number">12</span></span><br><span class="line"><span class="number">18</span> <span class="number">30</span> <span class="number">20</span></span><br><span class="line"><span class="number">18</span> <span class="number">25</span> <span class="number">70</span></span><br><span class="line"><span class="number">67</span> <span class="number">18</span> <span class="number">18</span></span><br><span class="line"><span class="number">20</span> <span class="number">18</span> <span class="number">20</span></span><br><span class="line"><span class="number">67</span> <span class="number">90</span> <span class="number">30</span></span><br><span class="line"><span class="number">67</span> <span class="number">39</span> <span class="number">15</span></span><br><span class="line"><span class="number">67</span> <span class="number">89</span> <span class="number">14</span></span><br><span class="line"><span class="number">89</span> <span class="number">20</span> <span class="number">17</span></span><br><span class="line"><span class="number">20</span> <span class="number">102</span> <span class="number">8</span></span><br><span class="line"><span class="number">2</span> <span class="number">18</span></span><br></pre></td></tr></table></figure>

<p><strong>【样例输出】</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">18</span> <span class="number">0</span></span><br><span class="line"><span class="number">20</span> <span class="number">20</span> <span class="number">18</span><span class="number">-20</span></span><br><span class="line"><span class="number">102</span> <span class="number">28</span> <span class="number">18</span><span class="number">-20</span><span class="number">-102</span></span><br><span class="line"><span class="number">90</span> <span class="number">32</span> <span class="number">18</span><span class="number">-30</span><span class="number">-90</span></span><br><span class="line"><span class="number">22</span> <span class="number">50</span> <span class="number">18</span><span class="number">-30</span><span class="number">-15</span><span class="number">-22</span></span><br><span class="line"><span class="number">25</span> <span class="number">66</span> <span class="number">18</span><span class="number">-30</span><span class="number">-15</span><span class="number">-22</span><span class="number">-56</span><span class="number">-25</span></span><br></pre></td></tr></table></figure>

<p><strong>【样例说明】</strong></p>
<p>该样例输入了12个位置顶点和14条边，形成了如下所示的地图：</p>
<img src="/images/cx3.jpg" width=80% height=50% align=center/>

<p>图中的圆表示顶点，顶点中上方的数字表示顶点编号，下方的数字表示该顶点包含的兴趣点，顶点之间连线上的数字是其边的长度。</p>
<p>要求从当前位置顶点18开始查找包含兴趣点为2的所有位置顶点。</p>
<p>首先，当前位置顶点就包含兴趣点2，其距离最近，所以输出 <code>18 0</code>；</p>
<p>其次距离最近的为与18直接相连的顶点20，距离为20，路径为 <code>18-20</code>。其它4个包含给定兴趣点的顶点类似。</p>
<p><strong>【评分标准】</strong></p>
<p>该题要求从输入的地图中查找所以包含兴趣点的顶点，提交程序名为 <code>search.c</code>。</p>
]]></content>
      <categories>
        <category>试卷</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>期末真题</tag>
        <tag>信息类</tag>
      </tags>
  </entry>
  <entry>
    <title>2025 年数据结构与程序设计（信息类）期中考试</title>
    <url>/2025/10/18/notes/</url>
    <content><![CDATA[<h3 id="选择题"><a href="#选择题" class="headerlink" title="选择题"></a><strong>选择题</strong></h3><ol>
<li><p>若双向链表结点类型定义为：</p>
 <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">rlink</span>,*<span class="title">llink</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p> 那么在双向链表中，要在结点<code>p</code>后插入结点<code>s</code>，以下代码执行顺序正确的是：________。</p>
 <span id="more"></span>
<p> ①<code>s-&gt;llink=p;</code></p>
<p> ②<code>p-&gt;rlink=s;</code></p>
<p> ③<code>s-&gt;rlink=p-&gt;rlink;</code></p>
<p> ④<code>p-&gt;rlink-&gt;llink=s;</code></p>
<p> A. ④②③①</p>
<p> B. ③①④②</p>
<p> C. ①③②④</p>
<p> D. ②④①③</p>
</li>
<li><p>以下哪一项是错误的结构体定义：________。</p>
<p> A.</p>
 <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p> B.</p>
 <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> x,y;</span><br><span class="line">&#125;Point;</span><br></pre></td></tr></table></figure>
<p> C.</p>
 <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">float</span> price;</span><br><span class="line">    <span class="type">char</span> *name;</span><br><span class="line">&#125;Book;</span><br></pre></td></tr></table></figure>
<p> D.</p>
 <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Tree</span> <span class="title">neighbor</span>;</span></span><br><span class="line">&#125;Tree;</span><br></pre></td></tr></table></figure>


</li>
<li><p>C语言中，想要获得指向<code>int</code>类型数组<code>a</code>中元素<code>a[6]</code>的指针，以下写法正确的是：________。</p>
<p> A. <code>int* p = a+24;</code></p>
<p> B. <code>int* p = a+6;</code></p>
<p> C. <code>int* p = (&amp;a)+6;</code></p>
<p> D. <code>int* p = a[6]</code></p>
</li>
<li><p>以下声明二维数组的语句中，错误的是：________。</p>
<p> A. <code>int a[3][2] = &#123;1,2,3,4,5,6&#125;;</code></p>
<p> B. <code>int a[3][2] = &#123;&#123;1,2&#125;,&#123;3,4&#125;,&#123;5,6&#125;&#125;;</code></p>
<p> C. <code>int a[][2] = &#123;&#123;1,2&#125;,&#123;3,4&#125;,&#123;5,6&#125;&#125;;</code></p>
<p> D. <code>int a[3][] = &#123;&#123;1,2&#125;,&#123;3,4&#125;,&#123;5,6&#125;&#125;;</code></p>
</li>
<li><p>给定如下代码,则输出的结果为：________。</p>
 <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> s[] = <span class="string">&quot;hel/0lo\0world&quot;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,s);</span><br></pre></td></tr></table></figure>
<p> A. <code>hel</code></p>
<p> B. <code>hello world</code></p>
<p> C. <code>hel/0lo</code></p>
<p> D. <code>hel/0lo\0world</code></p>
</li>
</ol>
<h3 id="填空题"><a href="#填空题" class="headerlink" title="填空题"></a><strong>填空题</strong></h3><ol>
<li><p>若单向链表结点类型定义为：</p>
 <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p> 如下代码实现了在单向链表的结点<code>p</code>后删除一个非空结点的功能：</p>
 <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">temp</span> =</span> p-&gt;next;</span><br><span class="line">________;</span><br><span class="line"><span class="built_in">free</span>(temp);</span><br></pre></td></tr></table></figure>
<p> 划线部分应该填写的语句是：________。</p>
</li>
<li><p>在二维数组<code>a[3][3]=&#123;&#123;1,4,7&#125;,&#123;2,5,8&#125;,&#123;3,6,9&#125;&#125;;</code>中，元素<code>a[2][1]</code>的值为________。</p>
</li>
<li><p>给定如下代码：</p>
 <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line">    ________ next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 如果希望该结构体实现类似链表的数据结构，横线部分填写的内容是：________。</p>
</li>
<li><p>给定一个二维<code>int</code>类型数组<code>a</code>，则<code>*(*(a+4)+2)</code>等价于访问该数组的元素________。</p>
</li>
<li><p>已知字符串<code>char s1[] = &quot;apple&quot;; char s2[] = &quot;banana&quot;;</code>，则<code>strcmp(s1,s2)</code>的值________0。（填“大于”，“等于”或“小于”）</p>
</li>
</ol>
<h3 id="编程题"><a href="#编程题" class="headerlink" title="编程题"></a><strong>编程题</strong></h3><p>1.<br><strong>【问题描述】</strong></p>
<p>论文写作时经常需要引用前人的文献（称为参考文献），引用时要在论文中以特定的格式表示。一种在人文社科领域常用的论文引用和参考文献格式是“哈佛格式”，其示例如下：</p>
<p>There is a risk the traditional focus on intensification of agriculture to maximize yields under “normal” conditions may result in greater vulnerability of farms to climate extremes (Lin, 2008). Often management decisions more focused on minimizing variability or reducing recovery times in yields of perennial crops are reliant on enhanced ecological knowledge of a farm (Morel, 2019). Traditional smallholder systems often already use agroecological methods (Altieri, 2017), hence it is important for extension interventions to complement this knowledge. </p>
<p>本题要求处理一种简化版的“哈佛格式”，其特点是：</p>
<p>（1）对文献的引用信息以英文左括号作为开始，以英文右括号作为结束；</p>
<p>（2）作者姓名和出版年份一起标记一篇参考文献，作者和年份之间以英文逗号隔开，逗号之后有一个空格，例如：(Lin, 2008)；</p>
<p>（3）括号之内没有其他多余的空格。<br>本题要求分析上述“哈佛格式”的文本，提取文中的参考文献信息并按要求输出文献列表。</p>
<p><strong>【输入形式】</strong></p>
<p>从标准输入中读入一段规范的英文文本。注意：这里约定</p>
<p>（1）文本中圆括号里的内容都是参考文献，不会有其他内容；</p>
<p>（2）输入内容长度不超过10000字符，文本中间不会有换行符，文本的最后有换行符；</p>
<p>（3）引用的参考文献不超过100篇；</p>
<p>（4）作者姓名不超过31字符，区分大小写（若大小写不同，可当作不同作者处理）。</p>
<p><strong>【输出形式】</strong></p>
<p>输出文献列表，即作者姓名和出版年份列表：</p>
<p>（1）每篇文献输出一行，作者姓名和出版年份之间以一个空格隔开；</p>
<p>（2）按参考文献出现的先后次序输出；</p>
<p>（3）姓名和年份都一致的文献算一篇文章，只输出一次（按首次出现计算），不可重复输出。</p>
<p><strong>【样例输入】</strong></p>
<p>There is a risk the traditional focus on intensification of agriculture to maximize yields under “normal” conditions may result in greater vulnerability of farms to climate extremes (Lin, 2008). Often management decisions more focused on minimizing variability or reducing recovery times in yields of perennial crops are reliant on enhanced ecological knowledge of a farm (Morel, 2019). Traditional smallholder systems often already use agroecological methods (Altieri, 2017), hence it is important for extension interventions to complement this knowledge. Agroforestry systems are relatively common in smallholder systems and are considered an effective strategy for achieving climate resilient agriculture(Vaast, 2016), particularly to temper the impacts of climate shocks for understory crops(Tscharntke, 2011). During dry season conditions, shade trees ameliorate temperature extremes; however, they may not be able to maintain optimal humidity levels to the same extent as during wet seasons(Blaser, 2018). For low-input smallholder systems, leguminous trees, or those with symbiotic relationships with N2-fixing microbes, are an important source of nutrients and have been planted as shade trees(Blaser, 1998). However, the practice is limited due to costs(Vaast, 2016) and in some cases has caused mortality events during climate shocks by outcompeting under story crops for ground water(Abdulai, 2018).</p>
<p><strong>【样例输出】</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Lin 2008</span><br><span class="line">Morel 2019</span><br><span class="line">Altieri 2017</span><br><span class="line">Vaast 2016</span><br><span class="line">Tscharntke 2011</span><br><span class="line">Blaser 2018</span><br><span class="line">Blaser 1998</span><br><span class="line">Abdulai 2018</span><br></pre></td></tr></table></figure>
<p><strong>【样例说明】</strong></p>
<p>输入的文章有9处文献引用，但不同的参考文献只有8篇，因为参考文献(Vaast, 2016)被引用了两次，只按首次出现输出一次。</p>
<p><strong>【评分标准】</strong></p>
<p>该题考察标准输入输出和字符串处理，提交程序名为：hvref.c。</p>
<p>2.<br><strong>【问题描述】</strong></p>
<p>一家银店会购入银块、卖出特定重量的白银，以及将散碎的白银熔合成大块。</p>
<p>请用链表形式模拟该店对白银的管理，每个链结点对应一个银块，记录该银块的重量（单位为克）；所有银块构成一个链表，且链表按照每个银块的重量始终保持升序排序。该链表允许如下操作：</p>
<p>（1）购入银块：将该银块按重量插入链表的合适位置；</p>
<p>（2）卖出m克白银：若m大于链表银块的总重量，则不处理（忽略该操作）；否则从链表第一个结点开始依次取出银块，直到取出银块的累计重量大于等于m为止。若取出的银块的累计重量大于m，则需要切割最后取出的银块，将切割后剩余银块放在链表的合适位置；</p>
<p>（3）熔合白银：将所有重量小于10克的银块熔为一块，并插入到链表的合适位置。</p>
<p>注意：不存在银块重量为0的链结点。</p>
<p><strong>【输入形式】</strong></p>
<p>从控制台输入由整数构成的序列，整数间以一个空格分隔，其中：</p>
<p>（1）正整数表示购入相应重量的银块；</p>
<p>（2）负整数表示卖出相应重量的白银；</p>
<p>（3）零表示熔合当前所有重量小于10克的散碎白银；</p>
<p>（4）数字999999表示输入结束。</p>
<p><strong>【输出形式】</strong></p>
<p>从链表头开始向控制台输出剩余银块的重量（正整数升序序列），各整数间以一个空格分隔，最后一个整数后有无空格均可。</p>
<p><strong>【样例输入】</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10 -10 15 10 -20 5 20 30 -24 8 20 0 5 999999</span><br></pre></td></tr></table></figure>
<p><strong>【样例输出】</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5 14 20 30</span><br></pre></td></tr></table></figure>
<p><strong>【样例说明】</strong></p>
<p>以上输入序列的含义为：购入10，卖出10，购入15，购入10，卖出20 （此时剩余银块为：5），购入5，购入20，购入30，卖出24（此时剩余银块为：6，30），购入8，购入20，熔合（此时银块为：14，20，30），购入5，结束。</p>
<p><strong>【评分标准】</strong></p>
<p>该题考察链表操作，提交程序名为：silver.c。</p>
]]></content>
      <categories>
        <category>试卷</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>信息类</tag>
        <tag>期中真题</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机组成 P2 课下“factorial”题解</title>
    <url>/2025/10/26/P2_off_factorial/</url>
    <content><![CDATA[<h3 id="题面回顾"><a href="#题面回顾" class="headerlink" title="题面回顾"></a>题面回顾</h3><p>运用 MIPS 汇编编写一个计算阶乘的程序。阶乘的结果在 1000 位以内。</p>
<p>程序的执行步数限制在 <strong>200,000</strong> 以内。</p>
<span id="more"></span>
<h3 id="思路建构"><a href="#思路建构" class="headerlink" title="思路建构"></a>思路建构</h3><p>很明显我们需要运用<strong>高精度乘法</strong>完成本题。首先让我们复习一下如何进行两个大数的高精度乘法，下面给出了对应的C语言代码，至于其汇编代码的编写就麻烦大家自行完成了。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">char</span> a[<span class="number">1005</span>],b[<span class="number">1005</span>];</span><br><span class="line"><span class="type">int</span> A[<span class="number">1005</span>],B[<span class="number">1005</span>],C[<span class="number">1005</span>],temp;</span><br><span class="line"><span class="type">char</span> out[<span class="number">1005</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;b;</span><br><span class="line">    <span class="type">int</span> lena=<span class="built_in">strlen</span>(a),lenb=<span class="built_in">strlen</span>(b);</span><br><span class="line">    <span class="type">int</span> len_out=lena+lenb;  <span class="comment">//a位与b位的数字相乘，结果最多为(a+b)位</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;lena;i++)&#123;</span><br><span class="line">        A[i]=a[lena-i<span class="number">-1</span>]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;lenb;i++)&#123;</span><br><span class="line">        B[i]=b[lenb-i<span class="number">-1</span>]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;                       <span class="comment">//类似于写竖式时，乘数的低位要对齐</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;lena;i++)&#123;</span><br><span class="line">        temp=<span class="number">0</span>;             <span class="comment">//记录进位</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;lenb;j++)&#123;</span><br><span class="line">            C[i+j]=A[i]*B[j]+temp+C[i+j];</span><br><span class="line">            temp=C[i+j]/<span class="number">10</span>;</span><br><span class="line">            C[i+j]%=<span class="number">10</span>;     <span class="comment">//想想竖式乘法是怎么计算的</span></span><br><span class="line">        &#125;</span><br><span class="line">        C[i+lenb]=temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> k;</span><br><span class="line">    <span class="keyword">for</span>(k=<span class="number">1004</span>;k&gt;<span class="number">0</span>;k--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(C[k<span class="number">-1</span>]!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;                       <span class="comment">//输出时注意去除前导0</span></span><br><span class="line">    <span class="keyword">for</span>(;k&gt;=<span class="number">0</span>;k--)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;C[k];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>解决了高精度乘法这一问题后，编写计算阶乘的程序似乎就很简单了。我们可以声明三个“数组”A，B 和 C，A 中存放上一次阶乘运算的结果，B 中存放当前乘数，C 中存放本次阶乘的结果。若需要再进行一次阶乘，则将 C 的内容复制到 A，将 A 乘以 B，再得出新的 C 即可。如此一来，我们只需要编写一个三重循环就可以完成任务。</p>
<h3 id="发现问题"><a href="#发现问题" class="headerlink" title="发现问题"></a>发现问题</h3><p>相信有的读者已经发现了问题：三重循环还是太逆天了，毕竟我们只有 200,000 步。事实也确实如此，我使用 mars 中的 Instruction Counter 工具得到了计算 40，60 和 100 的阶乘所需要的步数。结果大致如下表所示。</p>
<table>
<thead>
<tr>
<th>阶乘</th>
<th>计算步数</th>
</tr>
</thead>
<tbody><tr>
<td>40!</td>
<td>64,069</td>
</tr>
<tr>
<td>60!</td>
<td>164,903</td>
</tr>
<tr>
<td>100!</td>
<td>538,489</td>
</tr>
</tbody></table>
<p>通过这一份表我们可以看到，我们的代码在计算 60! 时就快要达到最大步数限制了，计算 100! 时就已经严重超出了步数限制——而此时阶乘的结果不过 158 位，远少于 1000 位。目前的这份“三重循环”代码显然不能完成这道题的任务。</p>
<h3 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h3><p>重新审视一下在“三重循环”代码中我们做了什么。在计算 $(n-1)!\times n$ 的循环中，我们做了以下几步：</p>
<ol>
<li><p>C 中原先存放了 $(n-1)!$ 的结果，将这一结果复制到 A</p>
</li>
<li><p>将这一次需要的 $n$ 复制到 B</p>
</li>
<li><p>两重循环计算出 $n!$，这一结果存储到 C 中</p>
</li>
</ol>
<p>在以上三个步骤中，1 看起来是比较累赘的，但是某种程度上我们又难以避免。考虑下面的一个场景：</p>
<p>如果我们不将上一次 C 中的内容复制到 A，则 <code>C[i+j]</code> 是这样计算的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C[i+j] = C[i] * B[j] + temp + C[i+j]</span><br></pre></td></tr></table></figure>

<p>如果我们还需要计算 <code>C[(i+j)+k]</code> 中的内容，程序会执行以下语句：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C[(i+j)+k] = C[i+j] * B[k] + temp + C[(i+j)+k]</span><br></pre></td></tr></table></figure>

<p>此时计算出的 <code>C[(i+j)+k]</code> 大约是不正确的，因为 <code>C[i+j]</code> 的值已经被改变，也就是说我们没有用原来的乘数乘以新的乘数。</p>
<p><strong>如何“避开”步骤 1 来节省步数？</strong></p>
<p>设想每次的 B 只有 1 位，则我们其实没有必要执行步骤 1 的操作。在这种情况下，循环体中的 <code>j</code> 只可能为 0，新的 C 中第 <code>k</code> 位的结果只另外依赖于 <code>B[0]</code> 和 <code>A[k]</code>。即使我们不将 C 的原有内容复制到 A，即 <code>C[k] = C[k] * B[0] + temp + C[k]</code>，<code>C[k]</code> 的改变也不会影响到 C 中其他位的结果——因为计算其他位的结果根本用不到 <code>C[k]</code>。这样一来，我们的程序也被简化为了<strong>二重循环</strong>（因为 <code>j</code> 只能取 0）。</p>
<p><strong>如何让 B 只有“1位”？</strong></p>
<p>我们不一定需要进行十进制乘法，可以进行 <strong>1000 进制</strong>的乘法。由于阶乘结果限制在 1000 位以内，B 不会超过 450（450! 的结果为 1001 位）。在 1000 进制的表示下，如果 $B\leq 450$，那么 B 必然只有“1位”。</p>
<p>进行 1000 进制的乘法也很简单——只需将 <code>%10</code> 改为 <code>%1000</code>。不过，输出计算结果时需要小心一点。</p>
<p><strong>如何输出 1000 进制乘法的结果？</strong></p>
<p>假设乘法结果在 1000 进制下最高位是第 $m$ 位，我们需要按照第 $m$ 位至第 0 位的顺序依次“拼接”输出。</p>
<p>输出第 $m$ 位：注意不能输出前导 0，输出 <code>C[m] % 1000</code> 即可。</p>
<p>输出第 $k$ 位（$0\leq k\leq m-1$）：注意需要输出前导 0。可以根据 <code>C[k]</code> 的大小来确定需要补充的前导 0 数量。例如，若 <code>C[k]</code> 是两位数，则需要补充 1 个前导 0。</p>
<h3 id="效果验证"><a href="#效果验证" class="headerlink" title="效果验证"></a>效果验证</h3><p>运用新的代码计算大数阶乘，阶乘数以及对应计算步数如下表所示。</p>
<table>
<thead>
<tr>
<th>阶乘数</th>
<th>计算步数</th>
</tr>
</thead>
<tbody><tr>
<td>40!</td>
<td>5,574</td>
</tr>
<tr>
<td>60!</td>
<td>13,214</td>
</tr>
<tr>
<td>100!</td>
<td>40,157</td>
</tr>
<tr>
<td>200!</td>
<td>185,014</td>
</tr>
<tr>
<td>300!</td>
<td>452,305</td>
</tr>
</tbody></table>
<p>可以看到，如果步数限制为 200,000，这一份代码可以成功计算 200!，相比第一版“三重循环”代码有了显著进步。不过，这离计算 450! 的目标还有比较大的差距。若还想进一步压缩程序执行步数，可以从以下方面考虑：</p>
<ol>
<li><p>“增大”进制，例如计算 10,000 进制乘法。不过进制也不能随意“增大”，毕竟一个字只能存放 <code>int</code> 大小的数据，这一量级是 $10^9$。</p>
</li>
<li><p>修改指令，减少不必要的寄存器赋值以及非基本指令的使用。</p>
</li>
</ol>
<p>如果只是想通过课程平台的评测，修改后的代码已经足够，数据点还是给得比较松弛的。</p>
<h3 id="最终代码"><a href="#最终代码" class="headerlink" title="最终代码"></a>最终代码</h3><p>下面给出这一题的参考代码。这一份代码只供参考和学习用，请不要随意抄袭。抄袭可能会导致你本次作业记为 0 分，甚至是受到处分。</p>
<p>请批判地学习这份代码。这一份代码只不过是通过了评测，其中体现出的恶劣代码编写习惯请尽量避免（包括但不限于寄存器的随意使用）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.data</span><br><span class="line">C:.space 5000</span><br><span class="line"></span><br><span class="line">.macro print_int(%sc)</span><br><span class="line">move $a0,%sc</span><br><span class="line">li $v0,1</span><br><span class="line">syscall</span><br><span class="line">.end_macro </span><br><span class="line"></span><br><span class="line">.macro read_int(%out)</span><br><span class="line">li $v0,5</span><br><span class="line">syscall</span><br><span class="line">move %out,$v0</span><br><span class="line">.end_macro </span><br><span class="line"></span><br><span class="line">.macro push(%sc)</span><br><span class="line">subi $sp,$sp,4</span><br><span class="line">sw %sc,0($sp)</span><br><span class="line">.end_macro </span><br><span class="line"></span><br><span class="line">.macro pop(%out)</span><br><span class="line">lw %out,0($sp)</span><br><span class="line">addi $sp,$sp,4</span><br><span class="line">.end_macro </span><br><span class="line"></span><br><span class="line">.macro end</span><br><span class="line">li $v0,10</span><br><span class="line">syscall</span><br><span class="line">.end_macro </span><br><span class="line"></span><br><span class="line">.text</span><br><span class="line">li $k0,1</span><br><span class="line">read_int($s0)	#阶乘数</span><br><span class="line">li $t1,2	#控制阶乘的循环变量</span><br><span class="line">sw $k0,C($0)	#结果初始值为1</span><br><span class="line">ble $s0,1,special	#输入0或1，直接特判即可</span><br><span class="line"></span><br><span class="line">li $t7,1	#C的位数</span><br><span class="line">jal loop_start</span><br><span class="line"></span><br><span class="line">sub $t2,$t7,1	#开始结果打印</span><br><span class="line">subi $t7,$t7,1</span><br><span class="line">li $v0,1</span><br><span class="line">j print_loop</span><br><span class="line"></span><br><span class="line">loop_start:</span><br><span class="line">    push($ra)</span><br><span class="line">    j loop_body</span><br><span class="line">    loop_body:</span><br><span class="line">    jal mult_loop_start</span><br><span class="line">    addi $t1,$t1,1	#B</span><br><span class="line">    ble $t1,$s0,loop_body</span><br><span class="line">    j back</span><br><span class="line"></span><br><span class="line">mult_loop_start:</span><br><span class="line">    push($ra)</span><br><span class="line">    li $t2,0	#高精度乘法的循环变量</span><br><span class="line">    li $t4,0	#进位记录</span><br><span class="line">    j mult_loop_body</span><br><span class="line">mult_loop_body:	#B的值存储在t1中</span><br><span class="line">    sll $t3,$t2,2	#获取C这一块内存的数值</span><br><span class="line">    lw $s1,C($t3)</span><br><span class="line"></span><br><span class="line">    mul $s1,$s1,$t1</span><br><span class="line">    add $s1,$s1,$t4	#C[i]*B+进位t4</span><br><span class="line">    div $t4,$s1,1000</span><br><span class="line">    mfhi $s2	#余数存入C</span><br><span class="line">    sw $s2,C($t3)</span><br><span class="line"></span><br><span class="line">    addi $t2,$t2,1</span><br><span class="line">    blt $t2,$t7,mult_loop_body</span><br><span class="line"></span><br><span class="line">    beq $t4,0,back	#如果当前进位不为0，C还需要增加一位</span><br><span class="line">    sll $t3,$t7,2</span><br><span class="line">    sw $t4,C($t3)</span><br><span class="line">    addi $t7,$t7,1</span><br><span class="line">    j back</span><br><span class="line"></span><br><span class="line">print_loop:</span><br><span class="line">    sll $t3,$t2,2</span><br><span class="line">    lw $t4,C($t3)</span><br><span class="line">    div $t4,$t4,1000</span><br><span class="line">    mfhi $t4</span><br><span class="line">    jal print_with_front_zero</span><br><span class="line">    print_int($t4)</span><br><span class="line">    subi $t2,$t2,1</span><br><span class="line">    bge $t2,0,print_loop</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">print_with_front_zero:</span><br><span class="line">    push($ra)</span><br><span class="line">    beq $t2,$t7,back</span><br><span class="line">    bge $t4,100,back</span><br><span class="line">    bge $t4,10,print_ten</span><br><span class="line">    j print_digit</span><br><span class="line"></span><br><span class="line">print_ten:</span><br><span class="line">    print_int($0)</span><br><span class="line">    print_int($t4)</span><br><span class="line">    pop($ra)</span><br><span class="line">    subi $t2,$t2,1</span><br><span class="line">    bge $t2,0,print_loop</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">print_digit:</span><br><span class="line">    print_int($0)</span><br><span class="line">    print_int($0)</span><br><span class="line">    print_int($t4)</span><br><span class="line">    pop($ra)</span><br><span class="line">    subi $t2,$t2,1</span><br><span class="line">    bge $t2,0,print_loop</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">special:</span><br><span class="line">    print_int($k0)</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">back:</span><br><span class="line">    pop($ra)</span><br><span class="line">    jr $ra</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>计算机组成课下</category>
      </categories>
      <tags>
        <tag>计算机组成</tag>
        <tag>高精度乘法</tag>
        <tag>MIPS 汇编</tag>
      </tags>
  </entry>
</search>
